package gui;

import core.Tarea;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;


public class ConflictedTask extends javax.swing.JFrame {

    private ArrayList<Tarea> sinHEst = new ArrayList<>();
    private ArrayList<Tarea> sinHReg = new ArrayList<>();
    private ArrayList<Tarea> menosEst = new ArrayList<>();
    private ArrayList<Tarea> masEst = new ArrayList<>();
    /**
     * Creates new form ConflictedTask
     */
    public ArrayList<Tarea> conflictivas = new ArrayList<Tarea>();
    public Inicio inicio;
    
    private final String AltSinHEst="Se recomienda que al momento de crear una tarea, "
                    + "el creador, indique el tiempo que se prevee que lleve "
                    + "terminarla";
   
    private final String AltSinHReg="Se recomienda que al pasar una a tarea a estado 'finalizado', "
                    + "el asignado registre las horas que tomo realizarla";
   
    private final String AltMenosEst="Se recomienda evaluar mejor la estimación teniendo en "
                    + "cuenta la dificultad de la tarea y el desempeño del "
                    + "usuario al cual se le asignará, probablemente este "
                    + "necesite de más tiempo para realizar tareas de este tipo.";
    
    private final String AltMasEst="Se recomienda evaluar mejor la estimación teniendo en "
                    + "cuenta el desempeño del usuario al cual se le va a "
                    + "asignar la tarea, este probablemente necesite de menos "
                    + "tiempo del que el creador supone para tareas de este tipo.";

    public ConflictedTask() {
        initComponents();
        this.setSize(905, 380);
        this.setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/iconogira.png")).getImage());
        this.setTitle("GIIA");
        jButton1.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaConflictivas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/jiranet.png"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tablaConflictivas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaConflictivas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Tarea", "Asignada a", "Creada por ", "Problema", "Alternativa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaConflictivas.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tablaConflictivasAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tablaConflictivas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaConflictivasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaConflictivas);
        if (tablaConflictivas.getColumnModel().getColumnCount() > 0) {
            tablaConflictivas.getColumnModel().getColumn(0).setPreferredWidth(100);
            tablaConflictivas.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        jButton1.setText("Ver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int fila = tablaConflictivas.getSelectedRow();
        String problema = String.valueOf(tablaConflictivas.getValueAt(fila, 3));
        int id = Integer.parseInt((String) tablaConflictivas.getValueAt(fila, 0));
        if (problema.equals("No se estimaron horas")) {
            for (Tarea t : sinHEst) {
                if (t.getId() == id) {
                    InfoTarea nuevo = new InfoTarea(t,AltSinHEst);
                    nuevo.setVisible(true);
                }
            }

        } else if (problema.equals("No se registraron horas")) {
            for (Tarea t : sinHReg) {
                if (t.getId() == id) {
                    InfoTarea nuevo = new InfoTarea(t,AltSinHReg);
                    nuevo.setVisible(true);
                }
            }
        }
        if (problema.equals("Se registró más tiempo que el estimado")) {
            for (Tarea t : menosEst) {
                if (t.getId() == id) {
                    InfoTarea nuevo = new InfoTarea(t,AltMenosEst);
                    nuevo.setVisible(true);
                }
            }

        }
        if (problema.equals("Se estimó más tiempo del que se  registro")) {
            for (Tarea t : masEst) {
                if (t.getId() == id) {
                    InfoTarea nuevo = new InfoTarea(t,AltMasEst);
                    nuevo.setVisible(true);
                }
            }

        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void tablaConflictivasAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tablaConflictivasAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaConflictivasAncestorAdded

    private void tablaConflictivasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaConflictivasMouseClicked
        // TODO add your handling code here:
        jButton1.setEnabled(true);
    }//GEN-LAST:event_tablaConflictivasMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConflictedTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConflictedTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConflictedTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConflictedTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConflictedTask().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaConflictivas;
    // End of variables declaration//GEN-END:variables

    public void cargarTareas() {

        DefaultTableModel tmodelConflictivas = (DefaultTableModel) tablaConflictivas.getModel();
        tmodelConflictivas.setRowCount(0);
        String datos[] = new String[5];      
        
        sinHEst = inicio.getAdministrador().getSinHorasEstimadas();
        sinHReg = inicio.getAdministrador().getSinHorasRegistradas();
        menosEst = inicio.getAdministrador().getMenosEstimadas();
        masEst = inicio.getAdministrador().getMalEstimadas();

        //System.out.println("Tareas conflictivas recuperadas sin estimacion        : " + sinHEst.size());
        //System.out.println("Tareas conflictivas recuperadas sin registro de horas : " + sinHReg.size());
        //System.out.println("Tareas conflictivas recuperadas con menos tiempo      : " + menosEst.size());
        //System.out.println("Tareas conflictivas recuperadas con mas tiempo        : " + masEst.size());
        
        for (Tarea t : sinHEst) {
            datos[0] = String.valueOf(t.getId());
            datos[1] = t.getAsignado();
            datos[2] = t.getCreador();
            datos[4] = AltSinHEst;
            datos[3] = "No se estimaron horas";
            tmodelConflictivas.addRow(datos);
        }
        for (Tarea t : sinHReg) {
            datos[0] = String.valueOf(t.getId());
            datos[1] = t.getAsignado();
            datos[2] = t.getCreador();
            datos[4] = AltSinHReg;
            datos[3] = "No se registraron horas";
            tmodelConflictivas.addRow(datos);
        }
        for (Tarea t : menosEst) {
            datos[0] = String.valueOf(t.getId());
            datos[1] = t.getAsignado();
            datos[2] = t.getCreador();
            datos[4] = AltMenosEst;
            datos[3] = "Se registro mas tiempo que el estimado";
            tmodelConflictivas.addRow(datos);
        }
        for (Tarea t : masEst) {
            datos[0] = String.valueOf(t.getId());
            datos[1] = t.getAsignado();
            datos[2] = t.getCreador();
            datos[4] = AltMasEst;
            datos[3] = "Se estimo mas tiempo del que se  registro";
            tmodelConflictivas.addRow(datos);
        }
    }

    void setInicio(Inicio aThis) {
        inicio = aThis;
    }
}
